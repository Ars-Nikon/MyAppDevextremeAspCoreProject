@using MyAppDevextremeAspCoreProject.Models
<h2>Employee</h2>
@(
Html.DevExtreme().DataGrid<Employee>()
                            .ShowBorders(true)
                            .DataSource(d => d.Mvc()
                            .Controller("Employee")
                            .LoadAction("GetEmployees")
                            .InsertAction("InsertEmployee")
                            .UpdateAction("UpdateEmployee")
                            .DeleteAction("DeleteEmployee")
                            .Key("Id"))
                            .Columns(columns =>
                            {
                                columns.AddFor(m => m.Id).Caption("Id").FormItem(x => x.Visible(false));
                                columns.AddFor(m => m.Name).Caption("Имя");
                                columns.AddFor(m => m.Surname).Caption("Фамилия");
                                columns.AddFor(m => m.Patronymic).Caption("Отчество");
                                columns.AddFor(m => m.BirthDate).Caption("Дата рождения");
                                columns.AddFor(m => m.Phone).Caption("Номер телефона").FormItem(x => x.Editor(y => y.TextBox().Mask(@"0 (000) 000-0000").MaskRules(new { X = new JS("/[02-9]/") })));
                                columns.AddFor(m => m.GuidFilials).DataField("GuidFilials.$values").Caption("Филилал").Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("Filial").LoadAction("GetFilialLookup").Key("Id"))
                                .ValueExpr("Id")
                                .DisplayExpr("Name")).CellTemplate(new JS("cellTemplate"))
                                .CalculateFilterExpression("calculateFilterExpression").EditCellTemplate(new TemplateName("TagBoxTemplate"));
                                columns.AddFor(m => m.CreatedDate).SortOrder(SortOrder.Desc).Caption("Дата создания").FormItem(x => x.Visible(false));
                            })
   .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .Editing(e => e.AllowAdding(true).AllowDeleting(true).AllowUpdating(true).Mode(GridEditMode.Form))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    )
    )

@using (Html.DevExtreme().NamedTemplate("TagBoxTemplate"))
{
    @(Html.DevExtreme().TagBox()
                            .DataSource(d => d.Mvc().Controller("Filial").LoadAction("GetFilialLookup").Key("Id")).DataSourceOptions(x => x.Paginate(true))
                .Value(new JS("value"))
                    .ValueExpr("Id")
                    .DisplayExpr("Name")
                .ShowSelectionControls(true)
                .MaxDisplayedTags(3)
                .ShowMultiTagOnly(false)
                .ApplyValueMode(EditorApplyValueMode.UseButtons)
                .SearchEnabled(true)
                .OnValueChanged("function(e) { setValue(e.value); }")
                .OnSelectionChanged("function(e) { component.updateDimensions(); }")
            )
}


<script>
    function cellTemplate(container, options) {
        var noBreakSpace = "\u00A0",
            text = (options.value || []).map(element => {
                return options.column.lookup.calculateCellValue(element);
            }).join(", ");
        container.text(text || noBreakSpace).attr("title", text);
    }
    function calculateFilterExpression(filterValue, selectedFilterOperation, target) {
        if (target === "search" && typeof (filterValue) === "string") {
            return [this.dataField, "contains", filterValue]
        }
        return function (data) {
            return (data.AssignedEmployee || []).indexOf(filterValue) !== -1
        }
    }
</script>